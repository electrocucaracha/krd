---
# SPDX-license-identifier: Apache-2.0
##############################################################################
# Copyright (c) 2019 Intel Corporation
# All rights reserved. This program and the accompanying materials
# are made available under the terms of the Apache License, Version 2.0
# which accompanies this distribution, and is available at
# http://www.apache.org/licenses/LICENSE-2.0
##############################################################################

- import_playbook: configure-qat-driver.yml

- hosts: qat-node
  become: yes
  tasks:
    - name: get qat devices
      shell: /usr/local/bin/adf_ctl status | grep up | awk '{print $4 substr($1, 4)}' | tr -d ','
      register: qat_devices
    - name: ensure SHIM config section
      blockinfile:
        dest: "/etc/{{ item }}.conf"
        block: |
          [SHIM]
          NumberCyInstances = 1
          NumberDcInstances = 0
          NumProcesses = 2
          LimitDevAccess = 0

          # Crypto - User instance #0
          Cy0Name = "UserCY0"
          Cy0IsPolled = 1
          # List of core affinities
          Cy0CoreAffinity = 0
      loop: "{{ qat_devices.stdout_lines }}"
    - name: restart qat services
      command: /usr/local/bin/adf_ctl restart

- hosts: localhost
  pre_tasks:
    - name: Load krd variables
      include_vars:
        file: krd-vars.yml
    - name: check if kubeclt was installed
      stat:
        path: /usr/local/bin/kubectl
      register: kubectl_lnk
  roles:
    - role: andrewrothstein.kubectl
      kubectl_ver: "v{{ kubectl_version }}"
      when: not kubectl_lnk.stat.exists
  tasks:
    - name: get qat plugin pod name
      shell: /usr/local/bin/kubectl get pods | grep intel-qat-plugin | awk '{print $1}'
      register: intel_qat_plugin_pod
    - name: delete qat plugin daemonset
      command: "/usr/local/bin/kubectl delete daemonsets intel-qat-plugin --now --force"
      ignore_errors: True
    - name: wait for destroying qat plugin
      shell: "/usr/local/bin/kubectl get pods {{ intel_qat_plugin_pod.stdout }}"
      register: kubectl_get_intel_qat_plugin_pod
      until: '"not found" in kubectl_get_intel_qat_plugin_pod.stdout'
      ignore_errors: True
    - name: create kubernetes objects
      command: "/usr/local/bin/kubectl apply -f {{ qat_plugin_url }}/qat_{{ item }}.yaml"
      loop:
        - plugin_default_configmap
        - plugin
    - name: use qat plugin stable docker image
      command: "/usr/local/bin/kubectl set image daemonset/intel-qat-plugin intel-qat-plugin=intel/intel-qat-plugin:{{ qat_plugin_version }}"
