---
# SPDX-license-identifier: Apache-2.0
##############################################################################
# Copyright (c) 2019
# All rights reserved. This program and the accompanying materials
# are made available under the terms of the Apache License, Version 2.0
# which accompanies this distribution, and is available at
# http://www.apache.org/licenses/LICENSE-2.0
##############################################################################

- name: Deploy cfssl binaries
  ansible.builtin.include_tasks: bootstrap.yml
  vars:
    binary: "{{ item }}"
  with_items:
    - cfssl
    - cfssljson

- name: Ensure destination folder exists
  ansible.builtin.file:
    mode: '0755'
    state: directory
    path: "{{ pmem_template_folder }}"

- name: Copy shell scripts
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: "{{ pmem_template_folder }}/{{ item }}.sh"
    mode: +x
  with_items:
    - setup-ca-kubernetes
    - setup-ca
    - test-config

- name: Create a PMEM namespace
  kubernetes.core.k8s:
    name: "{{ pmem_namespace }}"
    api_version: v1
    kind: Namespace
    state: present

- name: Get PMEM CSI node secret
  kubernetes.core.k8s_info:
    kind: Secret
    name: pmem-csi-intel-com-controller-secret
    namespace: "{{ pmem_namespace }}"
  register: node_secret

- name: Get PMEM CSI registry secret
  kubernetes.core.k8s_info:
    kind: Secret
    name: pmem-csi-intel-com-controller-secret
    namespace: "{{ pmem_namespace }}"
  register: registry_secret

- name: Print node and registry values
  ansible.builtin.debug:
    var: '{{ item }}_secret'
  with_items:
    - node
    - registry

- name: Create PMEM secrets
  become: true
  ansible.builtin.shell: 'PATH=$PATH:/usr/local/bin/ {{ pmem_template_folder }}/setup-ca-kubernetes.sh'
  environment:
    TEST_DRIVER_NAMESPACE: "{{ pmem_namespace }}"
  args:
    chdir: '{{ pmem_template_folder }}'
  when:
    - node_secret.resources | length == 0
    - registry_secret.resources | length == 0

- name: Create PMEM CSI for LVM driver
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', 'pmem-csi-lvm.yaml.j2') }}"

- name: Create PMEM storage classes
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('file', 'pmem-{{ item }}.yaml') }}"  # noqa jinja[invalid]
  with_items:
    - storageclass-ext4
    - storageclass-xfs
